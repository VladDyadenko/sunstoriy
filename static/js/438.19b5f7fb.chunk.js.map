{"version":3,"file":"static/js/438.19b5f7fb.chunk.js","mappings":"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","sources":["components/FinancialOffice/FinancialOfficeLayout/FinancialLayout.styled.js","components/FinancialOffice/FinancialButtonContainer/FinancialButtonContainer.styled.js","components/Expense/ExpenseContainer.styled.js","redux/expense/expenceSelector.js","components/Expense/ExpenseContainer.jsx","redux/salary/salarySelector.js","components/SalarisForm/SalarisForm.js","ui/ZvitButtonTitle/ZvitButtonTitle.styled.js","ui/ZvitButtonTitle/ZvitButtonTitle.jsx","utils/formatDateTitle.js","components/FinancialOffice/FinancialButtonContainer/FinancialButtonContainer.jsx","redux/zvit/api.js","components/FinancialOffice/PeriodReport/PeriodReport.styled.js","components/FinancialOffice/PeriodReport/PeriodReport.jsx","redux/zvit/zvitSelector.js","ui/ZvitReportTitle/ZvitReportTitle.styled.js","utils/formatDateCurrentMonth.js","ui/ZvitReportTitle/ZvitReportTitle.jsx","components/Zvit/TableExpensesZvit/TableExpensesZvit.jsx","components/Zvit/Salary/SalaryZvitTable/SalaryZvitTable.jsx","components/Zvit/ChildrensPeriodZvit/ChildrensPeriodZvit.jsx","components/Zvit/ChildPeriodZvit/ChildPeriodZvit.styled.js","components/Zvit/ChildPeriodZvit/ZvitChildPayments/ZvitChildPayments.jsx","components/Zvit/ChildPeriodZvit/ChildPeriodZvit.jsx","components/FinancialOffice/FinancialOfficeLayout/FinancialLayout.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const WrapperFinancialOffice = styled.div`\n  width: 100%;\n  padding: 10px;\n  display: flex;\n  align-items: start;\n  justify-content: center;\n\n  border-radius: 8px;\n  gap: 20px;\n  margin-bottom: 8px;\n`;\nexport const ContantLineWrapper = styled.div`\n  width: 100%;\n  max-width: 80%;\n  padding: 10px;\n`;\nexport const ZvitContainer = styled.div`\n  border: 1px solid var(--main-yellow);\n  padding: 7px;\n  border-radius: 15px;\n  margin-bottom: 30px;\n`;\n","import { Button } from 'antd';\nimport styled from 'styled-components';\nimport { btnStyledAll } from 'styles/GlobalStyles';\n\nexport const CommandLineWrapper = styled.div`\n  width: 100%;\n  max-width: 20%;\n  height: 100vh;\n  /* border: 2px solid var(--main-green); */\n  padding: 10px;\n`;\nexport const SectionsContainer = styled.div`\n  margin-bottom: 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const CommandLineButton = styled(Button)`\n  ${btnStyledAll}\n  background-color: var(--main-green);\n\n  &:hover {\n    background-color: var(--bg-main-color) !important;\n  }\n\n  &:disabled {\n    background-color: var(--main-disabled);\n    color: var(--header-main-color);\n  }\n  & span {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n  }\n  & svg {\n    width: 18px;\n    height: 18px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const DateTitle = styled.div`\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  text-align: center;\n  font-family: 'RobotoSlab';\n  font-weight: 500;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  border-bottom: 1px solid rgba(5, 5, 5, 0.06);\n`;\nexport const DateDescription = styled.span`\n  margin-left: 7px;\n  font-size: 18px;\n  color: var(--main-green);\n`;\nexport const ButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  padding-top: 20px;\n  border-top: 1px solid rgba(5, 5, 5, 0.06);\n`;\n","export const selectExpense = state => state.expense.operetion;\nexport const selectExpenseByDate = state => state.expense.expensesPeriod;\nexport const selectExpenseLoading = state => state.expense.isloading;\nexport const selectZvitStatusExpense = state => state.expense.zvitStatus;\nexport const selectExpenseSelected = state => state.expense.expenseSelected;\n","import { Drawer, Form, InputNumber, Select, Input, Button, Radio } from 'antd';\nimport { useForm } from 'antd/es/form/Form';\nimport { categoryExpense } from 'assets/constants/mainConstans';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addExpense, updateExpense } from 'redux/expense/expenseOperetion';\nimport { DateDescription, DateTitle } from './ExpenseContainer.styled';\nimport { selectExpenseSelected } from 'redux/expense/expenceSelector';\nimport { clearExpenseSelected } from 'redux/expense/expenseSlice';\nimport RangePickerForm from 'ui/RangePickerForm/RangePickerForm';\n\nconst ExpenseContainer = ({ setOpen, open, onCloseDrawerExpense }) => {\n  const [form] = useForm();\n  const [selectedDate, setSelectedDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const [paymentMethod, setPaymentMethod] = useState(null);\n  const dispatch = useDispatch();\n  const updateExpenseInfo = useSelector(selectExpenseSelected);\n\n  useEffect(() => {\n    if (updateExpenseInfo) {\n      setOpen(true);\n      form.setFieldsValue({\n        date: updateExpenseInfo.date\n          ? updateExpenseInfo.date.split('T')[0]\n          : selectedDate,\n        category: updateExpenseInfo.category || 'Інше',\n        amount: updateExpenseInfo.amount || null,\n        paymentForm: updateExpenseInfo.paymentForm || 'cash',\n        bank: updateExpenseInfo.bank || '',\n        description: updateExpenseInfo.description || '',\n      });\n      setPaymentMethod(updateExpenseInfo.paymentForm || 'cash');\n    }\n  }, [updateExpenseInfo, setOpen, form, selectedDate]);\n\n  return (\n    <>\n      <Drawer\n        title=\"Поточні витрати\"\n        placement=\"right\"\n        width={400}\n        onClose={onCloseDrawerExpense}\n        open={open}\n      >\n        <RangePickerForm setSelectedDate={setSelectedDate} />\n        <Form\n          form={form}\n          initialValues={{\n            date: null,\n            category: 'Інше',\n            amount: null,\n            paymentForm: 'cash',\n            bank: '',\n            description: '',\n          }}\n          onFinish={async values => {\n            if (updateExpenseInfo) {\n              const expenseData = { id: updateExpenseInfo._id, values };\n              await dispatch(updateExpense(expenseData)).then(async () => {\n                dispatch(clearExpenseSelected());\n                onCloseDrawerExpense();\n                form.resetFields();\n              });\n            } else {\n              if (values.paymentForm === 'cash') {\n                values.bank = '';\n              }\n              values.date = selectedDate;\n              await dispatch(addExpense(values)).then(() => {\n                onCloseDrawerExpense();\n                form.resetFields();\n              });\n            }\n          }}\n        >\n          <DateTitle>\n            Дата витрат: <DateDescription>{selectedDate}</DateDescription>\n          </DateTitle>\n\n          <Form.Item\n            label=\"Категорія витрат\"\n            name=\"category\"\n            rules={[{ required: true, message: 'Виберіть категорію' }]}\n          >\n            <Select>\n              {categoryExpense.map(expense => (\n                <Select.Option key={expense.category} value={expense.category}>\n                  {expense.title}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Форма оплати\"\n            name=\"paymentForm\"\n            onChange={e => {\n              if (e.target.value === 'cash') {\n                form.setFieldsValue({ bank: '' });\n              }\n            }}\n          >\n            <Radio.Group\n              onChange={e => {\n                setPaymentMethod(e.target.value);\n                if (e.target.value !== 'cashless') {\n                  form.setFieldsValue({ bank: undefined });\n                  form.resetFields(['bank', 'sum']);\n                }\n              }}\n            >\n              <Radio value=\"cash\">Готівка</Radio>\n              <Radio value=\"cashless\">Безготівкова</Radio>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item\n            rules={\n              paymentMethod === 'cashless'\n                ? [{ required: true, message: 'Оберіть банк' }]\n                : []\n            }\n            label=\"Виберіть банк\"\n            name=\"bank\"\n            style={{ width: 250 }}\n          >\n            <Select>\n              <Select.Option value=\"PrivatBank\">ПриватБанк</Select.Option>\n              <Select.Option value=\"MonoBank\">Монобанк</Select.Option>\n            </Select>\n          </Form.Item>\n          <Form.Item\n            rules={[{ required: true, message: 'Внесіть суму витрат' }]}\n            label=\"Сума\"\n            name=\"amount\"\n          >\n            <InputNumber style={{ width: '100%' }} placeholder=\"Вкажіть суму\" />\n          </Form.Item>\n          <Form.Item label=\"Опис витрат\" name=\"description\">\n            <Input.TextArea\n              placeholder=\"За потребою додайте опис\"\n              autoSize={{\n                minRows: 1,\n                maxRows: 5,\n              }}\n            />\n          </Form.Item>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column',\n              gap: 8,\n            }}\n          >\n            <Button\n              style={{ width: '100%' }}\n              type=\"primary\"\n              onClick={onCloseDrawerExpense}\n              htmlType=\"button\"\n            >\n              Відмінити\n            </Button>\n            <Button style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\">\n              Зберегти зміни\n            </Button>\n          </div>\n        </Form>\n      </Drawer>\n    </>\n  );\n};\n\nexport default ExpenseContainer;\n","export const selectSalaryForPeriod = state => state.salary.salaryPeriod;\nexport const selectSalaryLoading = state => state.salary.isloading;\nexport const selectSalaryStatus = state => state.salary.salaryStatus;\nexport const selectSalarySelected = state => state.salary.salarySelected;\n","import {\n  Button,\n  Checkbox,\n  Drawer,\n  Form,\n  Input,\n  InputNumber,\n  Select,\n} from 'antd';\nimport { useForm } from 'antd/es/form/Form';\nimport {\n  ButtonContainer,\n  DateDescription,\n  DateTitle,\n} from 'components/Expense/ExpenseContainer.styled';\nimport { Notify } from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addExpense } from 'redux/expense/expenseOperetion';\nimport { updateSalary } from 'redux/salary/salaryOperetion';\nimport { selectSalarySelected } from 'redux/salary/salarySelector';\nimport { clearSalarySelected } from 'redux/salary/salarySlice';\nimport RangePickerForm from 'ui/RangePickerForm/RangePickerForm';\n\nconst SalarisForm = ({ selectedPeriod }) => {\n  const [form] = useForm();\n  const dispatch = useDispatch();\n  const updateSalaryData = useSelector(selectSalarySelected);\n\n  const [selectedDate, setSelectedDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n\n  const [open, setOpen] = useState(false);\n  const [paymentSelected, setPaymentSelected] = useState(null);\n  const [paymentMethod, setPaymentMethod] = useState(null);\n\n  const onCloseDrawerSalary = () => {\n    setOpen(false);\n  };\n  const onCencelSalarySelected = () => {\n    setOpen(false);\n    dispatch(clearSalarySelected());\n  };\n  useEffect(() => {\n    if (updateSalaryData) {\n      setOpen(true);\n\n      form.setFieldsValue({\n        amount_cash: null,\n        amount_cashless: null,\n        amount_debt: updateSalaryData?.amount_debt,\n      });\n    }\n  }, [updateSalaryData, form]);\n\n  return (\n    <Drawer\n      title=\"Виплата зарплати фахівцям\"\n      placement=\"right\"\n      width={340}\n      open={open}\n      onClose={onCloseDrawerSalary}\n    >\n      <RangePickerForm setSelectedDate={setSelectedDate} />\n      <DateTitle>\n        <p style={{ marginBottom: 15 }}>\n          Фахівець:\n          <DateDescription>{` ${updateSalaryData?.name}  ${updateSalaryData?.surname}`}</DateDescription>\n        </p>\n        <p>\n          Дата нарахування:\n          <DateDescription>{selectedPeriod}</DateDescription>\n        </p>\n        <p>\n          Дата виплати:\n          <DateDescription>{selectedDate}</DateDescription>\n        </p>\n        <p>\n          Сума до виплати:\n          <DateDescription>{updateSalaryData?.amount_accrued}</DateDescription>\n        </p>\n      </DateTitle>\n\n      <Form\n        form={form}\n        initialValues={{\n          amount_cash: null,\n          amount_cashless: null,\n          amount_debt: updateSalaryData?.amount_debt,\n        }}\n        onFinish={async values => {\n          const totalPaid =\n            (values.amount_cash || 0) + (values.amount_cashless || 0);\n          if (totalPaid > updateSalaryData?.amount_debt) {\n            return Notify.failure('Сума виплати перевищує заборгованність!');\n          }\n          values.date = updateSalaryData.date;\n          values.comment = [\n            values.amount_cash ? `${values.amount_cash} грн` : null,\n            values.amount_cashless ? `${values.amount_cashless} грн` : null,\n            `виплачено ${selectedDate}`,\n          ]\n            .filter(Boolean)\n            .join(' ');\n\n          const salaryData = { id: updateSalaryData._id, values };\n\n          await dispatch(updateSalary(salaryData)).then(() => {\n            onCloseDrawerSalary();\n            // Додаємо витрати\n            if (values.amount_cash > 0 || values.amount_cash < 0) {\n              dispatch(\n                addExpense({\n                  date: selectedDate,\n                  salaryId: updateSalaryData?._id,\n                  category: `Зарплата ${updateSalaryData?.name} ${updateSalaryData?.surname}`,\n                  amount: values.amount_cash,\n                  paymentForm: 'cash',\n                  bank: '',\n                  description: `Нараховано ${\n                    updateSalaryData?.date.split('T')[0]\n                  }`,\n                })\n              );\n            }\n            if (values.amount_cashless > 0 || values.amount_cashless < 0) {\n              dispatch(\n                addExpense({\n                  date: selectedDate,\n                  salaryId: updateSalaryData?._id,\n                  category: `Зарплата ${updateSalaryData?.name} ${updateSalaryData?.surname}`,\n                  amount: values.amount_cashless,\n                  paymentForm: 'cashless',\n                  bank: values.bank,\n                  description: `Нараховано ${\n                    updateSalaryData?.date.split('T')[0]\n                  }`,\n                })\n              );\n            }\n\n            form.resetFields();\n            dispatch(clearSalarySelected());\n          });\n        }}\n      >\n        <Form.Item label=\"Форма виплати\" name=\"paymentMethod\">\n          <Checkbox.Group\n            onChange={values => {\n              setPaymentMethod(values);\n              setPaymentSelected(values);\n              if (!values?.includes('cashless')) {\n                form.setFieldsValue({ bank: undefined });\n                form.resetFields(['bank']);\n              }\n            }}\n          >\n            <Checkbox value=\"cash\">Готівка</Checkbox>\n            <Checkbox value=\"cashless\">Безготівкова</Checkbox>\n          </Checkbox.Group>\n        </Form.Item>\n        {/* Поле для виплати готівкою */}\n        {paymentSelected?.includes('cash') && (\n          <Form.Item\n            rules={\n              paymentMethod.includes('cash') && [\n                { required: true, message: 'Вкажіть суму' },\n              ]\n            }\n            label=\"Сума готівкою\"\n            name=\"amount_cash\"\n          >\n            <InputNumber\n              style={{ width: '100%' }}\n              placeholder=\"Сума готівкою\"\n              onChange={value => {\n                const cashless = form.getFieldValue('amount_cashless') || 0;\n                form.setFieldsValue({\n                  amount_debt:\n                    updateSalaryData?.amount_debt - (value || 0) - cashless,\n                });\n              }}\n            />\n          </Form.Item>\n        )}\n\n        {/* Поле для виплати безготівково */}\n        {paymentSelected?.includes('cashless') && (\n          <>\n            <Form.Item\n              label=\"Банк\"\n              name=\"bank\"\n              rules={[{ required: true, message: 'Оберіть банк' }]}\n            >\n              <Select>\n                <Select.Option value=\"PrivatBank\">ПриватБанк</Select.Option>\n                <Select.Option value=\"MonoBank\">Монобанк</Select.Option>\n              </Select>\n            </Form.Item>\n            <Form.Item\n              rules={\n                paymentMethod.includes('cashless') && [\n                  { required: true, message: 'Вкажіть суму' },\n                ]\n              }\n              label=\"Сума безготівково\"\n              name=\"amount_cashless\"\n            >\n              <InputNumber\n                style={{ width: '100%' }}\n                placeholder=\"Сума безготівково\"\n                onChange={value => {\n                  const cash = form.getFieldValue('amount_cash') || 0;\n                  form.setFieldsValue({\n                    amount_debt:\n                      updateSalaryData?.amount_debt - (value || 0) - cash,\n                  });\n                }}\n              />\n            </Form.Item>\n          </>\n        )}\n        <Form.Item label=\"Заборгованність\" name=\"amount_debt\">\n          <InputNumber style={{ width: '100%' }} readOnly />\n        </Form.Item>\n\n        <Form.Item label=\"Примітки\" name=\"comment\">\n          <Input.TextArea\n            placeholder=\"Інформація за потреби\"\n            autoSize={{\n              minRows: 1,\n              maxRows: 5,\n            }}\n          />\n        </Form.Item>\n        <ButtonContainer>\n          <Button\n            style={{ width: '100%' }}\n            type=\"primary\"\n            onClick={() => onCencelSalarySelected()}\n            htmlType=\"button\"\n          >\n            Відмінити\n          </Button>\n          <Button style={{ width: '100%' }} type=\"primary\" htmlType=\"submit\">\n            Зберегти зміни\n          </Button>\n        </ButtonContainer>\n      </Form>\n    </Drawer>\n  );\n};\n\nexport default SalarisForm;\n","import styled from 'styled-components';\n\nexport const TitleButton = styled.h3`\n  width: 100%;\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n  font-size: 18px;\n  text-align: center;\n  margin-bottom: 10px;\n  padding: 7px 0;\n  color: #fff;\n  background-color: var(--blue-tint);\n  border-radius: 5px;\n`;\n","import React from 'react';\nimport { TitleButton } from './ZvitButtonTitle.styled';\n\nconst ZvitButtonTitle = ({ title, zvitName }) => {\n  return (\n    <TitleButton>\n      {zvitName} {title}\n    </TitleButton>\n  );\n};\n\nexport default ZvitButtonTitle;\n","// для звітів\nexport const formatDateTitle = (dayOrePariod, selectedDateString) => {\n  if (dayOrePariod === 'oneDay') {\n    return `за ${selectedDateString[0].split('-').reverse().join('-')}`;\n  } else {\n    return `з ${selectedDateString[0]\n      .split('-')\n      .reverse()\n      .join('-')} по ${selectedDateString[1].split('-').reverse().join('-')}`;\n  }\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useState } from 'react';\nimport { Divider } from 'antd';\nimport 'dayjs/locale/uk'; // Імпортуємо українську локал\n\nimport { BsClipboardPulse, BsEmojiHeartEyes } from 'react-icons/bs';\n\nimport {\n  CommandLineButton,\n  CommandLineWrapper,\n  SectionsContainer,\n} from './FinancialButtonContainer.styled';\n\nimport ExpenseContainer from 'components/Expense/ExpenseContainer';\nimport {\n  createZvitSelectedPeriod,\n  getZvitChildrensPeriod,\n} from 'redux/zvit/zvitOperetion';\nimport { getSalarisByDate } from 'redux/salary/salaryOperetion';\nimport SalarisForm from 'components/SalarisForm/SalarisForm';\nimport { selectSalaryLoading } from 'redux/salary/salarySelector';\nimport { getExpensesByDate } from 'redux/expense/expenseOperetion';\nimport { selectExpenseLoading } from 'redux/expense/expenceSelector';\nimport ZvitButtonTitle from 'ui/ZvitButtonTitle/ZvitButtonTitle';\nimport RangePickerForm from 'ui/RangePickerForm/RangePickerForm';\nimport ButtonLoader from 'ui/ButtonLoader/ButtonLoader';\nimport { formatDateTitle } from 'utils/formatDateTitle';\n\nconst FinancialButtonContainer = ({\n  dayOrePariod,\n  setDayOrePariod,\n  setDateFromTitle,\n  zvitIsLoading,\n  selectedPeriod,\n  setSelectedPeriod,\n  selectedDateString,\n  setSelectedDateString,\n  setTypeZvit,\n  childrensLoading,\n}) => {\n  const dispatch = useDispatch();\n\n  const salariesLoading = useSelector(selectSalaryLoading);\n  const loading = useSelector(selectExpenseLoading);\n\n    const [selectedDate, setSelectedDate] = useState(\n      new Date().toISOString().split('T')[0]\n    );\n\n  const [open, setOpen] = useState(false);\n  const onCloseDrawerExpense = () => {\n    setOpen(false);\n  };\n\n  const createZvitForPeriod = async period => {\n    if (!period) return;\n    setTypeZvit('report_period');\n    await dispatch(createZvitSelectedPeriod(period)).then(() =>\n      setDateFromTitle(formatDateTitle(dayOrePariod, selectedDateString))\n    );\n  };\n  const getExpensesBySelectedPeriod = async period => {\n    if (!period) return;\n    setTypeZvit('report_expenses');\n\n    await dispatch(getExpensesByDate(period)).then(() =>\n      setDateFromTitle(formatDateTitle(dayOrePariod, selectedDateString))\n    );\n  };\n  const createSalaryZvitForPeriod = async period => {\n    if (!period) return;\n    setTypeZvit('report_salaries');\n\n    await dispatch(getSalarisByDate(period)).then(() =>\n      setDateFromTitle(formatDateTitle(dayOrePariod, selectedDateString))\n    );\n  };\n  const createChildrensZvitForPeriod = async period => {\n    if (!period) return;\n    setTypeZvit('report_childrens');\n\n    await dispatch(getZvitChildrensPeriod(period)).then(() =>\n      setDateFromTitle(formatDateTitle(dayOrePariod, selectedDateString))\n    );\n  };\n\n  return (\n    <>\n      <CommandLineWrapper>\n        <SectionsContainer>\n          <RangePickerForm\n            setSelectedDateString={setSelectedDateString}\n            setSelectedDate={setSelectedDate}\n            setSelectedPeriod={setSelectedPeriod}\n            setDayOrePariod={setDayOrePariod}\n          />\n          <ZvitButtonTitle title=\"Фінансові показники:\" />\n          <CommandLineButton\n            onClick={() => createZvitForPeriod(selectedPeriod)}\n          >\n            <>\n              {zvitIsLoading ? (\n                <ButtonLoader height=\"21\" width=\"50\" />\n              ) : (\n                <>\n                  Обіг коштів за період <BsClipboardPulse />\n                </>\n              )}\n            </>\n          </CommandLineButton>\n          <CommandLineButton\n            onClick={() => getExpensesBySelectedPeriod(selectedPeriod)}\n          >\n            {loading ? (\n              <ButtonLoader height=\"21\" width=\"50\" />\n            ) : (\n              <>\n                Розходи за період <BsClipboardPulse />\n              </>\n            )}\n          </CommandLineButton>\n        </SectionsContainer>\n        <Divider\n          style={{ borderWidth: 1, borderColor: '#fce010' }}\n          variant=\"solid\"\n        />\n        <SectionsContainer>\n          <ZvitButtonTitle title=\"Зарплата фахівців:\" />\n          <CommandLineButton\n            onClick={() => createSalaryZvitForPeriod(selectedPeriod)}\n          >\n            {salariesLoading ? (\n              <ButtonLoader height=\"21\" width=\"50\" />\n            ) : (\n              <>\n                За вибраний період <BsEmojiHeartEyes />\n              </>\n            )}\n          </CommandLineButton>\n        </SectionsContainer>\n        <Divider\n          style={{ borderWidth: 1, borderColor: '#fce010' }}\n          variant=\"solid\"\n        />\n        <SectionsContainer>\n          <ZvitButtonTitle title=\"Звіт по дітям:\" />\n          <CommandLineButton\n            onClick={() => createChildrensZvitForPeriod(selectedPeriod)}\n          >\n            {childrensLoading ? (\n              <ButtonLoader height=\"21\" width=\"50\" />\n            ) : (\n              <>\n                За вибраний період <BsEmojiHeartEyes />\n              </>\n            )}\n          </CommandLineButton>\n        </SectionsContainer>\n        <Divider\n          style={{ borderWidth: 1, borderColor: '#fce010' }}\n          variant=\"solid\"\n        />\n        <SectionsContainer>\n          <ZvitButtonTitle title=\"Внесення розходів\" />\n          <CommandLineButton onClick={() => setOpen(true)}>\n            <>Додай витрати</>\n          </CommandLineButton>\n          <ExpenseContainer\n            onCloseDrawerExpense={onCloseDrawerExpense}\n            open={open}\n            setOpen={setOpen}\n          />\n          <SalarisForm selectedPeriod={selectedDate} />\n        </SectionsContainer>\n      </CommandLineWrapper>\n    </>\n  );\n};\n\nexport default FinancialButtonContainer;\n","import axios from 'axios';\n\nexport const getZvitOneMonthTotal = async choesData => {\n  try {\n    const { data } = await axios.get(`/zvit/one_month_total`, {\n      params: choesData,\n    });\n\n    return data;\n  } catch (err) {\n    console.error('❌ Error:', err.message);\n  }\n};\n","import styled from 'styled-components';\nimport { Table } from 'antd';\n\nexport const StyledTable = styled(Table)`\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n\n  .ant-table {\n    font-size: 14px;\n  }\n\n  .ant-table-thead > tr > th {\n    background-color: #f0f2f5 !important; /* Колір фону заголовків */\n    font-weight: bold;\n    text-align: center;\n  }\n\n  .ant-table-tbody > tr:nth-child(even) {\n    background-color: #e6f7ff; /* Світло-сірий бекграунд через строчку */\n  }\n\n  .ant-table-tbody > tr > td {\n    text-align: center;\n  }\n\n  .ant-table-tbody > tr:hover {\n    background-color: #e6f7ff; /* Колір при наведенні */\n  }\n\n  .ant-table-row[data-row-key='balance'],\n  .ant-table-row[data-row-key='total'] {\n    font-size: 16px;\n    font-weight: 400;\n    background-color: #e6f7ff !important; /* Колір фону */\n    color: #1890ff; /* Колір тексту */\n    border-left: 10px;\n  }\n  .ant-btn-icon .anticon.anticon-delete > svg {\n    transition: all 0.05s cubic-bezier(0.645, 0.045, 0.355, 1);\n  }\n  .ant-btn-icon .anticon.anticon-delete > svg:hover {\n    fill: red;\n  }\n`;\nexport const StyledCellNegative = styled.span`\n  font-weight: 500;\n  font-size: 16px;\n  color: var(--main-red);\n`;\nexport const StyledCellPositive = styled.span`\n  font-weight: 500;\n  font-size: 16px;\n  color: var(--main-green);\n`;\nexport const StyledCell = styled.span`\n  color: inherit;\n`;\n","import React from 'react';\nimport {\n  StyledCell,\n  StyledCellNegative,\n  StyledTable,\n} from './PeriodReport.styled';\n\nconst ReportCurrentMonth = ({ indicatorsCurrentMonth, loading }) => {\n  const {\n    profit = {},\n    expense = {},\n    income = {},\n    workedIncom = 0,\n    previousPeriodProfit = {},\n  } = indicatorsCurrentMonth;\n\n  const columns = [\n    {\n      key: '1',\n      title: 'Категорія',\n      dataIndex: 'category',\n      render: value =>\n        value < 0 ? (\n          <StyledCellNegative>{value}</StyledCellNegative>\n        ) : (\n          <StyledCell>{value}</StyledCell>\n        ),\n    },\n    {\n      key: '2',\n      title: 'На початок періоду',\n      dataIndex: 'profitPrev',\n      render: value =>\n        value < 0 ? (\n          <StyledCellNegative>{value}</StyledCellNegative>\n        ) : (\n          <StyledCell>{value}</StyledCell>\n        ),\n    },\n    {\n      key: '3',\n      title: 'Оплачені кошти',\n      dataIndex: 'currentIncome',\n      render: value =>\n        value < 0 ? (\n          <StyledCellNegative>{value}</StyledCellNegative>\n        ) : (\n          <StyledCell>{value}</StyledCell>\n        ),\n    },\n\n    {\n      key: '4',\n      title: 'Відпрацьовано',\n      dataIndex: 'workedLessons',\n      onCell: (_, index) => {\n        if (index === 0) {\n          return { rowSpan: dataSource.length - 1 };\n        }\n        if (index === dataSource.length - 1) {\n          return { rowSpan: 1 };\n        }\n        return { rowSpan: 0 };\n      },\n    },\n    {\n      key: '5',\n      title: 'Поточні витрати',\n      dataIndex: 'currentExpense',\n      render: value =>\n        value < 0 ? (\n          <StyledCellNegative>{value}</StyledCellNegative>\n        ) : (\n          <StyledCell>{value}</StyledCell>\n        ),\n    },\n\n    {\n      key: '6',\n      title: 'На кінець періоду ',\n      dataIndex: 'profit',\n      render: value =>\n        value < 0 ? (\n          <StyledCellNegative>{value}</StyledCellNegative>\n        ) : (\n          <StyledCell>{value}</StyledCell>\n        ),\n    },\n  ];\n\n  const dataSource = [\n    {\n      key: 'cash',\n      category: 'Готівка',\n      profitPrev: previousPeriodProfit?.cash || 0,\n      profit: profit?.cash || 0,\n      currentExpense: expense?.cash || 0,\n      currentIncome: income?.cash || 0,\n      workedLessons: workedIncom,\n    },\n    {\n      key: 'privat',\n      category: 'ПриватБанк',\n      profitPrev: previousPeriodProfit?.privatBank || 0,\n      profit: profit?.privatBank || 0,\n      currentExpense: expense?.privatBank || 0,\n      currentIncome: income?.privatBank || 0,\n      workedLessons: '',\n    },\n    {\n      key: 'mono',\n      category: 'МоноБанк',\n      profitPrev: previousPeriodProfit?.monoBank || 0,\n      profit: profit?.monoBank || 0,\n      currentExpense: expense?.monoBank || 0,\n      currentIncome: income?.monoBank || 0,\n      workedLessons: '',\n    },\n    {\n      key: 'balance',\n      category: 'Ітого:',\n      profitPrev: previousPeriodProfit?.amount || 0,\n      profit: profit?.amount || 0,\n      currentExpense: expense?.amount || 0,\n      currentIncome: income?.amount || 0,\n      workedLessons: workedIncom,\n    },\n  ];\n\n  return (\n    <StyledTable\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      pagination={false}\n      loading={loading}\n    />\n  );\n};\n\nexport default ReportCurrentMonth;\n","export const selectZvitSelectedPeriod = state => state.zvit.zvitSelectedPeriod;\nexport const selectZvitChildrens = state => state.zvit.childrensSelected;\nexport const selectZvitChild = state => state.zvit.selectedChildData;\n\nexport const selectZvitLoadinge = state => state.zvit.isloading;\nexport const selectZvitLoadingeChildrens = state =>\n  state.zvit.isloadingChildrens;\nexport const selectZvitLoadingeChild = state => state.zvit.isloadingChild;\n\nexport const selectZvitStatus = state => state.zvit.zvitStatus;\n","import styled from 'styled-components';\nimport { Button } from 'antd';\nimport { TbRefresh } from 'react-icons/tb';\n\nexport const Title = styled.h3`\n  width: 100%;\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n  font-size: 18px;\n  text-align: center;\n  margin-bottom: 10px;\n  padding: 7px 0;\n  color: #fff;\n  background-color: var(--blue-tint);\n  border-top-left-radius: 15px;\n  border-top-right-radius: 15px;\n  position: relative;\n`;\nexport const ButtonRefreshIcon = styled(TbRefresh)`\n  width: 17px;\n  height: 17px;\n  stroke: var(--main-green);\n  transition: cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n  &:hover {\n    stroke: #fff;\n  }\n`;\nexport const ButtonRefreshZvit = styled(Button)`\n  width: 26px;\n  height: 26px;\n  top: 4px;\n  left: 10px;\n  position: absolute;\n  background: #fff;\n  transition: cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n  &:hover {\n    background: var(--main-green) !important;\n\n    ${ButtonRefreshIcon} {\n      stroke: #fff;\n    }\n  }\n`;\n","export function formatDateCurrentMonth() {\n  const now = new Date();\n  const startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n  const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n  const formattedDates = {\n    startDate: startDate.toISOString(),\n    endDate: endDate.toISOString(),\n  };\n  return formattedDates;\n}\n","import React from 'react';\nimport {\n  ButtonRefreshIcon,\n  ButtonRefreshZvit,\n  Title,\n} from './ZvitReportTitle.styled';\nimport { formatDateCurrentMonth } from 'utils/formatDateCurrentMonth';\nimport { getZvitOneMonthTotal } from 'redux/zvit/api';\n\nconst ZvitReportTitle = ({ title, zvitName, setIndicatorsCurrentMonth }) => {\n  const hendleRefreshZvit = async () => {\n    const currentMonth = formatDateCurrentMonth();\n    const { totalData } = await getZvitOneMonthTotal(currentMonth);\n    setIndicatorsCurrentMonth(totalData);\n  };\n  return (\n    <>\n      <Title>\n        {zvitName} {title}\n        {title === 'Поточні цифри місяця' && (\n          <ButtonRefreshZvit\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<ButtonRefreshIcon />}\n            onClick={hendleRefreshZvit}\n          />\n        )}\n      </Title>\n    </>\n  );\n};\n\nexport default ZvitReportTitle;\n","import { StyledTable } from 'components/FinancialOffice/PeriodReport/PeriodReport.styled';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Popconfirm, Space } from 'antd';\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteExpenseById,\n  getExpenseById,\n} from 'redux/expense/expenseOperetion';\n\nconst TableExpensesZvit = ({ expensZvitLoading, expenses }) => {\n  const dispatch = useDispatch();\n\n  const [expensesData, setExpensesData] = useState(expenses);\n  const [filters, setFilters] = useState({});\n\n  useEffect(() => {\n    const filteredData = applyFilters(expenses, filters);\n    setExpensesData(filteredData);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expenses, filters]);\n\n  const uniqueDates = [\n    ...new Set(\n      expenses.map(expense =>\n        new Date(expense.date).toLocaleDateString('uk-UA')\n      )\n    ),\n  ];\n\n  const applyFilters = (data, filters) => {\n    let filteredData = data;\n\n    const dateFilterKey = columns.find(col => col.dataIndex === 'date')?.key;\n    const categoryFilterKey = columns.find(\n      col => col.dataIndex === 'category'\n    )?.key;\n\n    if (filters[dateFilterKey] && filters[dateFilterKey].length) {\n      filteredData = filteredData.filter(expense =>\n        filters[dateFilterKey].includes(\n          new Date(expense.date).toLocaleDateString('uk-UA')\n        )\n      );\n    }\n\n    if (filters[categoryFilterKey] && filters[categoryFilterKey].length) {\n      filteredData = filteredData.filter(expense =>\n        filters[categoryFilterKey].includes(expense.category)\n      );\n    }\n\n    return filteredData;\n  };\n\n  const handleTableChange = (_, filters) => {\n    setFilters(filters);\n  };\n\n  const columns = [\n    {\n      key: '1',\n      title: 'Дата',\n      dataIndex: 'date',\n      filters: uniqueDates.map(date => ({ text: date, value: date })),\n      onFilter: (value, record) =>\n        record.key === 'total' || record.date === value,\n    },\n    {\n      key: '2',\n      title: 'Категорія',\n      dataIndex: 'category',\n      filters: [...new Set(expenses.map(expense => expense.category))].map(\n        category => ({ text: category, value: category })\n      ),\n      onFilter: (value, record) =>\n        record.key === 'total' || record.category === value,\n    },\n    {\n      key: '3',\n      title: 'Готівка',\n      dataIndex: 'amount_cash',\n    },\n    {\n      key: '4',\n      title: 'Приватбанк',\n      dataIndex: 'amount_privat',\n    },\n    {\n      key: '5',\n      title: 'Монобанк',\n      dataIndex: 'amount_mono',\n    },\n    {\n      key: '6',\n      title: 'Додаткова інформація',\n      dataIndex: 'description',\n    },\n    {\n      key: '7',\n      title: 'Дії',\n      dataIndex: 'actions',\n      render: (_, record) =>\n        record.key !== 'total' && (\n          <Space>\n            <Button\n              type=\"primary\"\n              icon={<EditOutlined />}\n              onClick={async () =>\n                await dispatch(getExpenseById(record.key)).then()\n              }\n            />\n            <Popconfirm\n              title=\"Видалення\"\n              description=\"Ви намагаєтесь видалити цю строчку. Продовжити?\"\n              icon={\n                <QuestionCircleOutlined\n                  style={{\n                    color: 'red',\n                  }}\n                />\n              }\n              onConfirm={() => {\n                dispatch(deleteExpenseById(record.key));\n              }}\n            >\n              <Button type=\"danger\" icon={<DeleteOutlined />} />\n            </Popconfirm>\n          </Space>\n        ),\n    },\n  ];\n\n  const dataSource = expensesData.map(expense => ({\n    key: expense._id,\n    date: new Date(expense.date).toLocaleDateString('uk-UA'),\n    category: expense.category,\n    amount_cash: expense.paymentForm === 'cash' ? expense.amount : '',\n    amount_privat:\n      expense.paymentForm === 'cashless' && expense.bank === 'PrivatBank'\n        ? expense.amount\n        : '',\n    amount_mono:\n      expense.paymentForm === 'cashless' && expense.bank === 'MonoBank'\n        ? expense.amount\n        : '',\n    description: expense.description,\n  }));\n\n  const totalCash = expensesData.reduce(\n    (sum, item) => sum + (item.paymentForm === 'cash' ? item.amount : 0),\n    0\n  );\n  const totalPrivat = expensesData.reduce(\n    (sum, item) =>\n      sum +\n      (item.paymentForm === 'cashless' && item.bank === 'PrivatBank'\n        ? item.amount\n        : 0),\n    0\n  );\n  const totalMono = expensesData.reduce(\n    (sum, item) =>\n      sum +\n      (item.paymentForm === 'cashless' && item.bank === 'MonoBank'\n        ? item.amount\n        : 0),\n    0\n  );\n\n  dataSource.push({\n    key: 'total',\n    date: 'Ітогом за період:',\n    category: '',\n    amount_cash: totalCash,\n    amount_privat: totalPrivat,\n    amount_mono: totalMono,\n    description: '',\n  });\n\n  return (\n    <StyledTable\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      pagination={false}\n      loading={expensZvitLoading}\n      onChange={handleTableChange}\n    />\n  );\n};\n\nexport default TableExpensesZvit;\n","import {\n  DeleteOutlined,\n  EditOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Popconfirm, Space } from 'antd';\nimport {\n  StyledCell,\n  StyledCellNegative,\n  StyledTable,\n} from 'components/FinancialOffice/PeriodReport/PeriodReport.styled';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteSalaryById, getSalaryById } from 'redux/salary/salaryOperetion';\n\nconst SalaryZvitTable = ({ salaryLoading, salaris }) => {\n  const dispatch = useDispatch();\n\n  const [filters, setFilters] = useState({});\n  const [salariesData, setSalariesData] = useState(salaris);\n\n  const uniqueDates = [\n    ...new Set(\n      salaris.map(salary => new Date(salary.date).toLocaleDateString('uk-UA'))\n    ),\n  ];\n  useEffect(() => {\n    setSalariesData(applyFilters(salaris, filters));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filters, salaris]);\n\n  const applyFilters = (data, filters) => {\n    let filteredData = data;\n    const dateFilterKey = columns.find(col => col.dataIndex === 'date')?.key;\n    const specialistFilterKey = columns.find(\n      col => col.dataIndex === 'specialist'\n    )?.key;\n\n    if (filters[dateFilterKey] && filters[dateFilterKey].length) {\n      filteredData = filteredData.filter(salary => {\n        return filters[dateFilterKey].includes(\n          new Date(salary.date).toLocaleDateString('uk-UA')\n        );\n      });\n    }\n    if (filters[specialistFilterKey] && filters[specialistFilterKey].length) {\n      filteredData = filteredData.filter(salary =>\n        filters[specialistFilterKey].includes(\n          `${salary.name} ${salary.surname}`\n        )\n      );\n    }\n\n    return filteredData;\n  };\n  const handleTableChange = (_, filters) => {\n    setFilters(filters);\n  };\n  const columns = [\n    {\n      key: '1',\n      title: 'Дата',\n      dataIndex: 'date',\n      filters: uniqueDates.map(date => ({ text: date, value: date })),\n      onFilter: (value, record) =>\n        record.key === 'total' || record.date === value,\n    },\n    {\n      key: '2',\n      title: 'Нараховано',\n      dataIndex: 'salaryStatus',\n    },\n    {\n      key: '3',\n      title: 'Фахівець',\n      dataIndex: 'specialist',\n      filters: [\n        ...new Set(salaris.map(salary => `${salary.name} ${salary.surname}`)),\n      ].map(fullName => ({ text: fullName, value: fullName })),\n      onFilter: (value, record) => {\n        if (record.key === 'total') return true;\n        const transformValue = value.replace(/([а-яa-z])([А-ЯA-Z])/g, '$1 $2');\n        return record.specialist === transformValue;\n      },\n    },\n    {\n      key: 'group',\n      title: 'Виплачено',\n      children: [\n        {\n          key: '4',\n          title: 'Готівка',\n          dataIndex: 'amount_cash',\n        },\n        {\n          key: '5',\n          title: 'Приватбанк',\n          dataIndex: 'amount_privat',\n        },\n        {\n          key: '6',\n          title: 'Монобанк',\n          dataIndex: 'amount_mono',\n        },\n      ],\n    },\n    {\n      key: '7',\n      title: 'Заборгованість',\n      dataIndex: 'amount_debt',\n      render: (value, record) => {\n        if (value < 0 && record.key !== 'total') {\n          return <StyledCellNegative>{value} (переплата) </StyledCellNegative>;\n        }\n\n        if (record.key === 'total') {\n          return <StyledCell>{value}</StyledCell>;\n        } else {\n          return <StyledCellNegative>{value}</StyledCellNegative>;\n        }\n      },\n    },\n    {\n      key: '8',\n      title: 'Додаткова інформація',\n      dataIndex: 'description',\n    },\n\n    {\n      key: '9',\n      title: 'Дії',\n      dataIndex: 'actions',\n      render: (_, record) =>\n        record.key !== 'total' && (\n          <Space>\n            <Popconfirm\n              title=\"Виплата зарплати\"\n              description=\"Нарахувати виплату?\"\n              icon={\n                <QuestionCircleOutlined\n                  style={{\n                    color: 'red',\n                  }}\n                />\n              }\n              onConfirm={async () => await dispatch(getSalaryById(record.key))}\n            >\n              <Button type=\"primary\" icon={<EditOutlined />} />\n            </Popconfirm>\n\n            <Popconfirm\n              title=\"Видалення\"\n              description=\"Ви намагаєтесь видалити цю строчку. Продовжити?\"\n              icon={\n                <QuestionCircleOutlined\n                  style={{\n                    color: 'red',\n                  }}\n                />\n              }\n              onConfirm={() => {\n                dispatch(deleteSalaryById(record.key));\n              }}\n            >\n              <Button type=\"danger\" icon={<DeleteOutlined />} />\n            </Popconfirm>\n          </Space>\n        ),\n    },\n  ];\n  const dataSource = salariesData.map(salary => {\n    const {\n      _id,\n      date,\n      amount_accrued,\n      amount_cash,\n      amount_cashless,\n      amount_debt,\n      name,\n      surname,\n      bank,\n      comment,\n    } = salary;\n\n    return {\n      key: _id,\n      date: new Date(date).toLocaleDateString('uk-UA'),\n      salaryStatus: amount_accrued ? amount_accrued : '',\n      specialist: `${name} ${surname}`,\n      amount_cash: amount_cash ? amount_cash : '',\n      amount_privat:\n        amount_cashless && bank === 'PrivatBank' ? amount_cashless : '',\n      amount_mono:\n        amount_cashless && bank === 'MonoBank' ? amount_cashless : '',\n      amount_debt: amount_debt ? amount_debt : '',\n      description: comment,\n    };\n  });\n\n  const total = salariesData.reduce(\n    (sum, item) => sum + (item.amount_accrued ? item.amount_accrued : 0),\n    0\n  );\n  const totalDebt = salariesData.reduce(\n    (sum, item) => sum + (item.amount_debt ? item.amount_debt : 0),\n    0\n  );\n  const totalCash = salariesData.reduce(\n    (sum, item) => sum + (item.amount_cash ? item.amount_cash : 0),\n    0\n  );\n  const totalPrivat = salariesData.reduce(\n    (sum, item) =>\n      sum +\n      (item.amount_cashless && item.bank === 'PrivatBank'\n        ? item.amount_cashless\n        : 0),\n    0\n  );\n  const totalMono = salariesData.reduce(\n    (sum, item) =>\n      sum +\n      (item.amount_cashless && item.bank === 'MonoBank'\n        ? item.amount_cashless\n        : 0),\n    0\n  );\n\n  dataSource.push({\n    key: 'total',\n    date: 'Ітогом за період:',\n    salaryStatus: total,\n    amount_cash: totalCash,\n    amount_privat: totalPrivat,\n    amount_mono: totalMono,\n    amount_debt: totalDebt,\n    description: '',\n  });\n  return (\n    <StyledTable\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      pagination={false}\n      loading={salaryLoading}\n      onChange={handleTableChange}\n    />\n  );\n};\n\nexport default SalaryZvitTable;\n","import { Button } from 'antd';\nimport {\n  StyledCell,\n  StyledCellNegative,\n  StyledCellPositive,\n  StyledTable,\n} from 'components/FinancialOffice/PeriodReport/PeriodReport.styled';\nimport React, { useEffect, useState } from 'react';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLessonOperetionPayment } from 'redux/Lesson/lessonSelector';\nimport {\n  getZvitChildByIdAndPeriod,\n  getZvitChildrensPeriod,\n} from 'redux/zvit/zvitOperetion';\n\nconst ChildrensPeriodZvit = ({\n  childrens,\n  childrensLoading,\n  selectedPeriod,\n  setOpenDrawer,\n  childrenLoading,\n}) => {\n  const dispatch = useDispatch();\n\n  const [currentIdChild, setCurrentIdChild] = useState('');\n\n  const paymentOperetion = useSelector(selectLessonOperetionPayment);\n  useEffect(() => {\n    if (paymentOperetion === 'addPayment' && selectedPeriod) {\n      const fetchData = async () => {\n        const choesData = { id: currentIdChild, selectedPeriod };\n        await dispatch(getZvitChildrensPeriod(selectedPeriod));\n        await dispatch(getZvitChildByIdAndPeriod(choesData));\n      };\n      fetchData();\n    }\n  }, [currentIdChild, dispatch, paymentOperetion, selectedPeriod]);\n\n  const handleChildClick = async id => {\n    const choesData = { id, selectedPeriod };\n    await dispatch(getZvitChildByIdAndPeriod(choesData)).then(\n      () => setCurrentIdChild(id),\n      setOpenDrawer(true)\n    );\n  };\n  const columns = [\n    {\n      key: '1',\n      title: \"Ім'я дитини\",\n      dataIndex: 'childName',\n      render: (text, record) => {\n        return childrenLoading === record.key ? (\n          <ThreeDots\n            visible={true}\n            height=\"32\"\n            width=\"148\"\n            color=\"#4fa94d\"\n            radius=\"9\"\n            ariaLabel=\"three-dots-loading\"\n            wrapperStyle={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n            wrapperClass=\"\"\n          />\n        ) : (\n          <Button\n            type=\"link\"\n            htmlType=\"button\"\n            onClick={() => handleChildClick(record.key)}\n          >\n            {text}\n          </Button>\n        );\n      },\n    },\n\n    {\n      key: '4',\n      title: 'Баланс на початок',\n      dataIndex: ['start', 'balance'],\n      render: (value, record) => {\n        if (value < 0) {\n          return <StyledCellNegative>{value}</StyledCellNegative>;\n        } else if (value > 0) {\n          return <StyledCellPositive>{value}</StyledCellPositive>;\n        } else {\n          return <StyledCell>{value}</StyledCell>;\n        }\n      },\n    },\n    {\n      key: 'group2',\n      title: 'За період',\n      children: [\n        {\n          key: '5',\n          title: 'Відпрацьовано',\n          dataIndex: ['period', 'price'],\n        },\n        {\n          key: '6',\n          title: 'Оплачено',\n          dataIndex: ['period', 'sum'],\n        },\n        {\n          key: '7',\n          title: 'Баланс',\n          dataIndex: ['period', 'balance'],\n        },\n      ],\n    },\n    {\n      key: '8',\n      title: 'Кінцевий баланс',\n      dataIndex: ['end', 'balance'],\n      render: (value, record) => {\n        if (value < 0) {\n          return <StyledCellNegative>{value}</StyledCellNegative>;\n        } else if (value > 0) {\n          return <StyledCellPositive>{value}</StyledCellPositive>;\n        } else {\n          return <StyledCell>{value}</StyledCell>;\n        }\n      },\n    },\n  ];\n\n  const dataSource = childrens?.map(children => ({\n    key: children.child,\n    childName: `${children.childName}${\n      children.childSurname ? ` ${children.childSurname}` : ''\n    }`,\n    start: {\n      balance: children.start.balance,\n    },\n    period: {\n      price: children.period.price,\n      sum: children.period.sum,\n      balance: children.period.balance,\n    },\n    end: {\n      balance: children.end.balance,\n    },\n  }));\n\n  return (\n    <StyledTable\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      pagination={false}\n      loading={childrensLoading}\n      // onChange={handleTableChange}\n    />\n  );\n};\n\nexport default ChildrensPeriodZvit;\n","import styled from 'styled-components';\n\nexport const TitleChildZvit = styled.p`\n  width: 100%;\n  margin-bottom: 20px;\n  text-align: center;\n  font-size: 26px;\n  font-family: 'RobotoSlab';\n  font-weight: 500;\n  color: var(--main-green);\n`;\nexport const DescrBalance = styled.span`\n  margin-left: 100px;\n  font-size: 18px;\n  color: var(--main-green);\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deletePayment } from 'redux/Lesson/lessonOperetion';\nimport {\n  clearPaymentOperetion,\n  creatPaymentOperetion,\n} from 'redux/Lesson/lessonSlice';\nimport PaymentForm from 'ui/lessonPayment/PaymentForm';\nimport PaymentsLessonList from 'ui/lessonPayment/PaymentsLessonList/PaymentsLessonList';\nimport RangePickerForm from 'ui/RangePickerForm/RangePickerForm';\n\nconst ZvitChildPayments = ({ selectedLessonData, setOpenPaymentDrawer }) => {\n  const dispatch = useDispatch();\n\n  const { payments, id, salaryData, price, dateLesson } = selectedLessonData;\n  const initialPaymentValues = {\n    date: dateLesson,\n    amount: 0,\n    paymentForm: 'noPayment',\n    bank: '',\n    isHappend: 'Відпрацьоване',\n  };\n\n  const [currentPayment, setCurrentPayment] = useState(\n    payments ? payments : []\n  );\n  useEffect(() => {\n    if (payments) {\n      setCurrentPayment(payments);\n    }\n  }, [payments]);\n  const [editingPayment, setEditingPayment] = useState(null);\n\n  const [selectedDate, setSelectedDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const handleDeletePayment = async paymentId => {\n    const combinedData = { lessonId: id, paymentId };\n    await dispatch(deletePayment(combinedData))\n      .then(({ payload }) => {\n        dispatch(creatPaymentOperetion());\n        setCurrentPayment(payload.sum);\n        setEditingPayment(null);\n        setOpenPaymentDrawer(false);\n      })\n      .finally(() => {\n        dispatch(clearPaymentOperetion());\n      });\n  };\n  const onCloseDrawer = () => {\n    setOpenPaymentDrawer(false);\n  };\n  return (\n    <>\n      <RangePickerForm setSelectedDate={setSelectedDate} />\n      {payments && payments.length > 0 ? (\n        <PaymentsLessonList\n          currentPayment={currentPayment}\n          dateFromExpense={selectedDate}\n          handleDeletePayment={handleDeletePayment}\n          setEditingPayment={setEditingPayment}\n          editingPayment={editingPayment}\n        />\n      ) : null}\n\n      <PaymentForm\n        isZvitForm={true}\n        initialPaymentValues={initialPaymentValues}\n        id={id}\n        onCloseDrawer={onCloseDrawer}\n        price={price}\n        dateFromExpense={selectedDate}\n        setEditingPayment={setEditingPayment}\n        editingPayment={editingPayment}\n        setCurrentPayment={setCurrentPayment}\n        salaryData={salaryData}\n      />\n    </>\n  );\n};\n\nexport default ZvitChildPayments;\n","import { Button, Drawer, Popconfirm } from 'antd';\nimport {\n  StyledCell,\n  StyledCellNegative,\n  StyledCellPositive,\n  StyledTable,\n} from 'components/FinancialOffice/PeriodReport/PeriodReport.styled';\n\nimport { DescrBalance, TitleChildZvit } from './ChildPeriodZvit.styled';\nimport { ZvitContainer } from 'components/FinancialOffice/FinancialOfficeLayout/FinancialLayout.styled';\nimport { EditOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport { useEffect, useState } from 'react';\nimport ZvitChildPayments from './ZvitChildPayments/ZvitChildPayments';\n\nconst ChildPeriodZvit = ({\n  childSelectedData,\n  openDrawer,\n  setOpenDrawer,\n  childrenLoading,\n}) => {\n  const [openPaymentDrawer, setOpenPaymentDrawer] = useState(false);\n  const [selectedLessonData, setSelectedLessonData] = useState('');\n  const [selectedChildData, setSelectedChildData] = useState(null);\n\n  const onClose = () => {\n    setOpenPaymentDrawer(false);\n  };\n\n  const totalPrice = selectedChildData?.details.reduce(\n    (acm, item) => acm + (item.price ? item.price : 0),\n    0\n  );\n  const totalSum = selectedChildData?.details.reduce(\n    (acm, item) => acm + (item.sum ? item.sum : 0),\n    0\n  );\n  const totalBalance =\n    selectedChildData?.totalPreviousBalance + (totalSum - totalPrice);\n  const titleTotalBalance = balance => {\n    if (balance > 0) {\n      return <StyledCellPositive>{balance} грн</StyledCellPositive>;\n    }\n    if (balance === 0) {\n      return <StyledCell>{balance}</StyledCell>;\n    } else {\n      return <StyledCellNegative>{balance} грн</StyledCellNegative>;\n    }\n  };\n  useEffect(() => {\n    if (childSelectedData) {\n      setSelectedChildData(childSelectedData);\n    }\n  }, [childSelectedData]);\n\n  const handlePaymentLesson = (id, price, sum, payments, salaryData) => {\n    const lessonFinanseData = { id, price, sum, payments, salaryData };\n    setOpenPaymentDrawer(true);\n    setSelectedLessonData(lessonFinanseData);\n  };\n  const columns = [\n    {\n      key: '1',\n      title: 'Дата',\n      dataIndex: 'date',\n    },\n    {\n      key: '2',\n      title: 'Вхідний баланс',\n      dataIndex: 'previousBalance',\n    },\n    {\n      key: '3',\n      title: 'Кабінет',\n      dataIndex: 'office',\n    },\n    {\n      key: '4',\n      title: 'Відпрацьовано',\n      dataIndex: 'price',\n    },\n    {\n      key: '5',\n      title: 'Сплачено',\n      dataIndex: 'sum',\n    },\n    {\n      key: '6',\n      title: 'Кінцевий баланс',\n      dataIndex: 'balance',\n      render: (value, record) => {\n        if (value < 0) {\n          return <StyledCellNegative>{value}</StyledCellNegative>;\n        } else if (value > 0) {\n          return <StyledCellPositive>{value}</StyledCellPositive>;\n        } else {\n          return <StyledCell>{value}</StyledCell>;\n        }\n      },\n    },\n    {\n      key: '6',\n      title: 'Дії',\n      dataIndex: 'actions',\n      render: (_, record) => {\n        if (record.key !== 'total') {\n          return (\n            <Popconfirm\n              title=\"Оплата заняття\"\n              description=\"Внести оплату?\"\n              icon={\n                <QuestionCircleOutlined\n                  style={{\n                    color: 'red',\n                  }}\n                />\n              }\n              onConfirm={() =>\n                handlePaymentLesson(\n                  record.key,\n                  record.price,\n                  record.sum,\n                  record.payments,\n                  record.salaryData\n                )\n              }\n            >\n              <Button type=\"primary\" icon={<EditOutlined />} />\n            </Popconfirm>\n          );\n        }\n        return null;\n      },\n    },\n  ];\n\n  const dataSource = selectedChildData?.details.map(lesson => {\n    const {\n      balance,\n      dateLesson,\n      office,\n      price,\n      sum,\n      lessonId,\n      payments,\n      salaryData,\n    } = lesson;\n    return {\n      key: lessonId,\n      date: new Date(dateLesson).toLocaleDateString('uk-UA'),\n      previousBalance: '',\n      office,\n      price,\n      sum,\n      balance,\n      payments,\n      salaryData,\n    };\n  });\n\n  dataSource?.push({\n    key: 'total',\n    date: 'Ітог:',\n    previousBalance: selectedChildData.totalPreviousBalance\n      ? selectedChildData.totalPreviousBalance\n      : 0,\n    office: '',\n    price: totalPrice,\n    sum: totalSum,\n    balance: totalBalance,\n  });\n\n  return (\n    <>\n      <Drawer\n        title=\"Історія по дитині за вибраний період\"\n        placement=\"top\"\n        open={openDrawer}\n        styles={{\n          content: {\n            height: '60vh',\n            overflowY: 'auto',\n          },\n        }}\n      >\n        <ZvitContainer>\n          <TitleChildZvit>\n            {selectedChildData?.childName}\n            {selectedChildData?.childSurname\n              ? ` ${selectedChildData?.childSurname}`\n              : ''}\n            <DescrBalance>\n              Загальний баланс: {titleTotalBalance(totalBalance)}\n            </DescrBalance>\n          </TitleChildZvit>\n          <StyledTable\n            columns={columns}\n            dataSource={dataSource}\n            size=\"small\"\n            pagination={false}\n            loading={childrenLoading}\n            // onChange={handleTableChange}\n          />\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Button\n              style={{ width: 200, marginTop: 20 }}\n              type=\"primary\"\n              htmlType=\"button\"\n              onClick={() => setOpenDrawer(false)}\n            >\n              Закрити\n            </Button>\n          </div>\n        </ZvitContainer>\n      </Drawer>\n      <Drawer\n        open={openPaymentDrawer}\n        onClose={onClose}\n        title=\"Внесення оплати за заняття\"\n        placement=\"right\"\n        width={460}\n      >\n        <ZvitChildPayments\n          selectedLessonData={selectedLessonData}\n          setOpenPaymentDrawer={setOpenPaymentDrawer}\n        />\n      </Drawer>\n    </>\n  );\n};\n\nexport default ChildPeriodZvit;\n","import React, { useEffect, useState } from 'react';\nimport {\n  ContantLineWrapper,\n  WrapperFinancialOffice,\n  ZvitContainer,\n} from './FinancialLayout.styled';\nimport FinancialButtonContainer from '../FinancialButtonContainer/FinancialButtonContainer';\nimport Container from 'components/Container/Container';\nimport { getZvitOneMonthTotal } from 'redux/zvit/api';\nimport ReportCurrentMonth from '../PeriodReport/PeriodReport';\nimport { useSelector } from 'react-redux';\nimport {\n  selectExpenseByDate,\n  selectExpenseLoading,\n} from 'redux/expense/expenceSelector';\nimport {\n  selectZvitChild,\n  selectZvitChildrens,\n  selectZvitLoadinge,\n  selectZvitLoadingeChild,\n  selectZvitLoadingeChildrens,\n  selectZvitSelectedPeriod,\n} from 'redux/zvit/zvitSelector';\nimport ZvitReportTitle from 'ui/ZvitReportTitle/ZvitReportTitle';\nimport TableExpensesZvit from 'components/Zvit/TableExpensesZvit/TableExpensesZvit';\nimport SalaryZvitTable from 'components/Zvit/Salary/SalaryZvitTable/SalaryZvitTable';\nimport {\n  selectSalaryForPeriod,\n  selectSalaryLoading,\n} from 'redux/salary/salarySelector';\nimport ChildrensPeriodZvit from 'components/Zvit/ChildrensPeriodZvit/ChildrensPeriodZvit';\nimport ChildPeriodZvit from 'components/Zvit/ChildPeriodZvit/ChildPeriodZvit';\nimport { formatDateCurrentMonth } from 'utils/formatDateCurrentMonth';\n\nconst FinancialLayout = () => {\n  const [indicatorsCurrentMonth, setIndicatorsCurrentMonth] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [typeZvit, setTypeZvit] = useState('');\n  const [dateFromTitle, setDateFromTitle] = useState('');\n  const [selectedPeriod, setSelectedPeriod] = useState(null);\n  const [selectedDateString, setSelectedDateString] = useState(null);\n  const [dayOrePariod, setDayOrePariod] = useState('oneDay');\n\n  const [openDrawer, setOpenDrawer] = useState(false);\n\n  const { totalData } = useSelector(selectZvitSelectedPeriod);\n  const zvitIsLoading = useSelector(selectZvitLoadinge);\n\n  const { expenses } = useSelector(selectExpenseByDate);\n  const expensZvitLoading = useSelector(selectExpenseLoading);\n\n  const salaris = useSelector(selectSalaryForPeriod);\n  const salaryLoading = useSelector(selectSalaryLoading);\n\n  const childSelectedData = useSelector(selectZvitChild);\n  const childrens = useSelector(selectZvitChildrens);\n  const childrensLoading = useSelector(selectZvitLoadingeChildrens);\n  const childrenLoading = useSelector(selectZvitLoadingeChild);\n\n  const isLoad = zvitIsLoading || salaryLoading || childrensLoading;\n\n  useEffect(() => {\n    const fetchZvitOneMonthTotal = async () => {\n      const currentMonth = formatDateCurrentMonth();\n\n      try {\n        setLoading(true);\n        setTypeZvit('');\n\n        const { totalData } = await getZvitOneMonthTotal(currentMonth);\n        setIndicatorsCurrentMonth(totalData);\n      } catch (error) {\n        console.error('❌ Error fetching total profit:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchZvitOneMonthTotal();\n  }, []);\n\n  // Перевірка даних в totalData, що там є значення, не рівні 0\n  function hasNonZeroValue(obj) {\n    if (typeof obj === 'object' && obj !== null) {\n      for (const key in obj) {\n        if (Object.hasOwnProperty.call(obj, key)) {\n          if (hasNonZeroValue(obj[key])) {\n            return true;\n          }\n        }\n      }\n    } else if (obj !== 0) {\n      return true;\n    }\n    return false;\n  }\n  const isTotalDate = hasNonZeroValue(totalData);\n\n  return (\n    <Container>\n      <WrapperFinancialOffice>\n        <FinancialButtonContainer\n          setTypeZvit={setTypeZvit}\n          dayOrePariod={dayOrePariod}\n          setDayOrePariod={setDayOrePariod}\n          setDateFromTitle={setDateFromTitle}\n          zvitIsLoading={zvitIsLoading}\n          selectedPeriod={selectedPeriod}\n          setSelectedPeriod={setSelectedPeriod}\n          selectedDateString={selectedDateString}\n          setSelectedDateString={setSelectedDateString}\n          childrensLoading={childrensLoading}\n        />\n        <ContantLineWrapper>\n          <ZvitContainer>\n            <ZvitReportTitle\n              setIndicatorsCurrentMonth={setIndicatorsCurrentMonth}\n              title=\"Поточні цифри місяця\"\n            />\n            <ReportCurrentMonth\n              loading={loading}\n              indicatorsCurrentMonth={indicatorsCurrentMonth}\n            />\n          </ZvitContainer>\n          {typeZvit === 'report_childrens' &&\n          childrens &&\n          childrens.length > 0 ? (\n            <ZvitContainer>\n              <ZvitReportTitle\n                zvitName={`Інформація по дітям`}\n                title={`${dateFromTitle}`}\n              />\n              <ChildrensPeriodZvit\n                childrens={childrens}\n                childrensLoading={childrensLoading}\n                selectedPeriod={selectedPeriod}\n                setOpenDrawer={setOpenDrawer}\n                childrenLoading={childrenLoading}\n              />\n\n              <ChildPeriodZvit\n                selectedPeriod={selectedPeriod}\n                openDrawer={openDrawer}\n                setOpenDrawer={setOpenDrawer}\n                childSelectedData={childSelectedData}\n                childrenLoading={childrenLoading}\n              />\n            </ZvitContainer>\n          ) : typeZvit === '' ||\n            typeZvit === 'report_expenses' ||\n            typeZvit === 'report_salaries' ||\n            typeZvit === 'report_period' ||\n            isLoad ? null : (\n            <>\n              <ZvitReportTitle\n                zvitName={`Інформація по дітям`}\n                title={`${dateFromTitle}`}\n              />\n              <h4>Даних в обраному періоді немає</h4>\n            </>\n          )}\n\n          {typeZvit === 'report_period' && totalData && isTotalDate ? (\n            <ZvitContainer>\n              <ZvitReportTitle\n                zvitName={`Обороти`}\n                title={`${dateFromTitle}`}\n              />\n              <ReportCurrentMonth\n                loading={zvitIsLoading}\n                indicatorsCurrentMonth={totalData}\n              />\n            </ZvitContainer>\n          ) : typeZvit === '' ||\n            typeZvit === 'report_expenses' ||\n            typeZvit === 'report_salaries' ||\n            typeZvit === 'report_childrens' ||\n            isLoad ? null : (\n            <>\n              <ZvitReportTitle\n                zvitName={`Обороти`}\n                title={`${dateFromTitle}`}\n              />\n              <h4>Даних в обраному періоді немає</h4>\n            </>\n          )}\n          {typeZvit === 'report_expenses' &&\n          expenses &&\n          expenses?.length > 0 ? (\n            <ZvitContainer>\n              <ZvitReportTitle\n                zvitName={`Розходи`}\n                title={`${dateFromTitle}`}\n              />\n              <TableExpensesZvit\n                expensZvitLoading={expensZvitLoading}\n                expenses={expenses}\n              />\n            </ZvitContainer>\n          ) : typeZvit === '' ||\n            typeZvit === 'report_period' ||\n            typeZvit === 'report_salaries' ||\n            typeZvit === 'report_childrens' ||\n            isLoad ? null : (\n            <>\n              <ZvitReportTitle\n                zvitName={`Розходи`}\n                title={`${dateFromTitle}`}\n              />\n              <h4>Витрат в обраному періоді немає</h4>\n            </>\n          )}\n          {typeZvit === 'report_salaries' && salaris && salaris?.length > 0 ? (\n            <ZvitContainer>\n              <ZvitReportTitle\n                zvitName={`Зарплата`}\n                title={`${dateFromTitle}`}\n              />\n              <SalaryZvitTable\n                salaris={salaris}\n                salaryLoading={salaryLoading}\n              />\n            </ZvitContainer>\n          ) : typeZvit === '' ||\n            typeZvit === 'report_period' ||\n            typeZvit === 'report_expenses' ||\n            typeZvit === 'report_childrens' ||\n            isLoad ? null : (\n            <>\n              <ZvitReportTitle\n                zvitName={`Зарплата`}\n                title={`${dateFromTitle}`}\n              />\n              <h4>Зарплата в обраному періоді не нарахована</h4>\n            </>\n          )}\n        </ContantLineWrapper>\n      </WrapperFinancialOffice>\n    </Container>\n  );\n};\n\nexport default FinancialLayout;\n"],"names":["WrapperFinancialOffice","styled","div","ContantLineWrapper","ZvitContainer","CommandLineWrapper","SectionsContainer","CommandLineButton","Button","btnStyledAll","DateTitle","DateDescription","span","ButtonContainer","selectExpenseByDate","state","expense","expensesPeriod","selectExpenseLoading","isloading","selectExpenseSelected","expenseSelected","_ref","setOpen","open","onCloseDrawerExpense","form","useForm","selectedDate","setSelectedDate","useState","Date","toISOString","split","paymentMethod","setPaymentMethod","dispatch","useDispatch","updateExpenseInfo","useSelector","useEffect","setFieldsValue","date","category","amount","paymentForm","bank","description","_jsx","_Fragment","children","_jsxs","Drawer","title","placement","width","onClose","RangePickerForm","Form","initialValues","onFinish","async","expenseData","id","_id","values","updateExpense","then","clearExpenseSelected","resetFields","addExpense","Item","label","name","rules","required","message","Select","categoryExpense","map","Option","value","onChange","e","target","Radio","undefined","style","InputNumber","placeholder","Input","TextArea","autoSize","minRows","maxRows","display","alignItems","flexDirection","gap","type","onClick","htmlType","selectSalaryForPeriod","salary","salaryPeriod","selectSalaryLoading","selectSalarySelected","salarySelected","selectedPeriod","updateSalaryData","paymentSelected","setPaymentSelected","onCloseDrawerSalary","amount_cash","amount_cashless","amount_debt","marginBottom","surname","amount_accrued","Notify","failure","comment","filter","Boolean","join","salaryData","updateSalary","salaryId","clearSalarySelected","Checkbox","Group","includes","cashless","getFieldValue","cash","readOnly","TitleButton","h3","zvitName","formatDateTitle","dayOrePariod","selectedDateString","reverse","setDayOrePariod","setDateFromTitle","zvitIsLoading","setSelectedPeriod","setSelectedDateString","setTypeZvit","childrensLoading","salariesLoading","loading","ZvitButtonTitle","period","createZvitSelectedPeriod","createZvitForPeriod","ButtonLoader","height","BsClipboardPulse","getExpensesByDate","getExpensesBySelectedPeriod","Divider","borderWidth","borderColor","variant","getSalarisByDate","createSalaryZvitForPeriod","BsEmojiHeartEyes","getZvitChildrensPeriod","createChildrensZvitForPeriod","ExpenseContainer","SalarisForm","getZvitOneMonthTotal","data","axios","get","params","choesData","err","console","error","StyledTable","Table","StyledCellNegative","StyledCellPositive","StyledCell","indicatorsCurrentMonth","profit","income","workedIncom","previousPeriodProfit","columns","key","dataIndex","render","onCell","_","index","rowSpan","dataSource","length","profitPrev","currentExpense","currentIncome","workedLessons","privatBank","monoBank","size","pagination","selectZvitSelectedPeriod","zvit","zvitSelectedPeriod","selectZvitChildrens","childrensSelected","selectZvitChild","selectedChildData","selectZvitLoadinge","selectZvitLoadingeChildrens","isloadingChildrens","selectZvitLoadingeChild","isloadingChild","Title","ButtonRefreshIcon","TbRefresh","ButtonRefreshZvit","formatDateCurrentMonth","now","startDate","getFullYear","getMonth","endDate","setIndicatorsCurrentMonth","shape","icon","currentMonth","totalData","expensZvitLoading","expenses","expensesData","setExpensesData","filters","setFilters","filteredData","applyFilters","uniqueDates","Set","toLocaleDateString","_columns$find","_columns$find2","dateFilterKey","find","col","categoryFilterKey","text","onFilter","record","Space","EditOutlined","getExpenseById","Popconfirm","QuestionCircleOutlined","color","onConfirm","deleteExpenseById","DeleteOutlined","amount_privat","amount_mono","totalCash","reduce","sum","item","totalPrivat","totalMono","push","handleTableChange","salaryLoading","salaris","salariesData","setSalariesData","specialistFilterKey","fullName","transformValue","replace","specialist","getSalaryById","deleteSalaryById","salaryStatus","total","totalDebt","childrens","setOpenDrawer","childrenLoading","currentIdChild","setCurrentIdChild","paymentOperetion","selectLessonOperetionPayment","getZvitChildByIdAndPeriod","fetchData","ThreeDots","visible","radius","ariaLabel","wrapperStyle","justifyContent","wrapperClass","handleChildClick","child","childName","childSurname","start","balance","price","end","TitleChildZvit","p","DescrBalance","selectedLessonData","setOpenPaymentDrawer","payments","dateLesson","initialPaymentValues","isHappend","currentPayment","setCurrentPayment","editingPayment","setEditingPayment","PaymentsLessonList","dateFromExpense","handleDeletePayment","combinedData","lessonId","paymentId","deletePayment","_ref2","payload","creatPaymentOperetion","finally","clearPaymentOperetion","PaymentForm","isZvitForm","onCloseDrawer","childSelectedData","openDrawer","openPaymentDrawer","setSelectedLessonData","setSelectedChildData","totalPrice","details","acm","totalSum","totalBalance","totalPreviousBalance","handlePaymentLesson","lessonFinanseData","lesson","office","previousBalance","styles","content","overflowY","marginTop","ZvitChildPayments","FinancialLayout","setLoading","typeZvit","dateFromTitle","isLoad","fetchZvitOneMonthTotal","isTotalDate","hasNonZeroValue","obj","Object","hasOwnProperty","call","Container","FinancialButtonContainer","ZvitReportTitle","ReportCurrentMonth","ChildrensPeriodZvit","ChildPeriodZvit","TableExpensesZvit","SalaryZvitTable"],"sourceRoot":""}